#!/usr/bin/env python3
# coding: utf-8
# editer: LEE, Kuang-Che
# date: 2023/11/16

import requests
import msgpack
from fastapi import FastAPI, BackgroundTasks
import time, datetime
import uvicorn
import pandas as pd


result = {'status':'200', 'result':'None', 'message':'standby', 'IP': 'None', 'Port':'None', 'Platform':'None', 'Protocol':'None'}


def encode(data):
    return msgpack.packb(data)


def decode(data):
    return msgpack.unpackb(data, strict_map_key=False)


def conv(data, encoding='utf-8'):
    if isinstance(data, bytes):
        return data.decode(encoding=encoding)
    if isinstance(data, list):
        return list(map(lambda iter: conv(iter, encoding=encoding), data))
    if isinstance(data,set):
        return set(map(lambda iter: conv(iter, encoding=encoding), data))
    if isinstance(data, dict):
        return dict(map(lambda iter: conv(iter, encoding=encoding), data.items()))
    if isinstance(data, tuple):
        return map(lambda iter: conv(iter, encoding=encoding), data)
    return data



def login():

    user = 'peng'
    password = 'peng'
    method = 'auth.login'
    opts = [method, user, password]
    headers = {"Content-type": "binary/message-pack"}
    url = "https://%s:%s%s" %('127.0.0.1', 55553, '/api/')
    payload = encode(opts)
    resp = requests.post(url, data=payload, headers=headers, verify=False)
    data = conv(decode(resp.content))
    
    return data['token']
    
    
def send(token, method, opts=None):

    headers = {"Content-type": "binary/message-pack"}
    url = "https://%s:%s%s" %('127.0.0.1', 55553, '/api/')
    if not isinstance(opts, list):
        opts = []
    opts.insert(0, token)
    opts.insert(0, method)
    payload = encode(opts)
    time.sleep(1)
    resp = requests.post(url=url, data=payload, headers=headers, verify=False)
    data = conv(decode(resp.content))
    
    return data

def combineInfo(data_list, platform, protocol, ip, port):
    result.update({'status':'200', 'message':'Preprocessing'})
    action = []
    
    for run in range(len(platform)):
        platform_tmp, api_tmp, ip_tmp, port_tmp = [], [], [], []
        
        if platform[run] == 'all':
            platform_tmp = data_list['Platform'].unique()
        else:
            platform_tmp.append(platform[run])
    
        if protocol[run] == 'all':
            api_tmp = data_list['API'].unique()
        else:
            api_tmp.append(protocol[run])
        
        ip_tmp = ip[run]
        port_tmp = port[run]
        
        result.update({'IP': ip[run], 'Port': port[run], 'Platform': platform[run], 'Protocol': protocol[run]})
        
        
    
        for i in platform_tmp:
            for j in api_tmp:
                for k in range(len(data_list['Platform'])):
                    if data_list['Platform'][k] == i and data_list['API'][k] == j:
                        action.append([data_list['Platform'][k]+'/'+data_list['API'][k]+'/'+data_list['Script'][k].strip(' '), ip_tmp, port_tmp, data_list['Script'][k].strip(' ')])
        
        
    exe(action, data_list)
        
        
    return



def exe(action, data_list):
    global result
    global label
    result.update({'status':'200', 'message': 'Execute Processing'})
    
    total_number = len(action)
    n = 0
    
    for i in action:
        n += 1
        token = login()
        detect = []
        runopt = {}
        info = send(token, 'module.options', ['exploit', i[0]])
        for j in info:
           if info[j]['required']:
               if j == True:
                   detect.append('True')
               elif j == False:
                   detect.append('False')
               else:
                   detect.append(j)
           if 'default' in info[j]:
               runopt[j] = info[j]['default']
        miss_opt = list(set(detect).difference(list(runopt.keys())))
        
        runopt.setdefault('RHOSTS', i[1])
        if i[2] != 'default':
            runopt.update({'RPORT': i[2]})
        if i[3] == 'tomcat_mgr_deploy' or i[3] == 'tomcat_mgr_upload':
            runopt.setdefault('HttpUsername', 'tomcat')
            runopt.setdefault('HttpPassword', 'tomcat')
            runopt.update({'RPORT': '8180'})
            
        check = send(token, 'job.list')
        check_time = datetime.datetime.now()
        
        while check != {}:
            if datetime.datetime.now() > check_time + datetime.timedelta(seconds=30):
                token = login()
                for k in check.keys():
                    send(token, 'job.stop', [k])
            check = send(token, 'job.list')
            time.sleep(1)
        
        send(token, 'module.execute', ['exploit', i[0], runopt])
        print('==========>', i[0], ' is running')
        result.update({'message':'%s/%s Processing' %(n, total_number)})
        print(result)
        check_session(token, data_list, i[1])
        if label == True:
            break
    result.update({'status':'200', 'message':'standby'})
    return result


def check_session(token, data_list, ip):
    global result
    script = []
    session_list = send(token, 'session.list')
    for i in session_list:
        vule = session_list[i]['via_exploit'].split('/')
        script.append(vule[-1])
        
    list_vulner = result['result']
    
    for j in script:    
        for k in range(len(data_list['Script'])):
            if data_list['Script'][k].strip(' ') == j:
                if list_vulner != 'None':
                    list_vulner.setdefault(len(list_vulner), [ip, data_list['Platform'][k], data_list['API'][k], data_list['CVE'][k]])
                else:
                    list_vulner = {}
                    list_vulner.setdefault(len(list_vulner), [ip, data_list['Platform'][k], data_list['API'][k], data_list['CVE'][k]])

    result.update({'result':list_vulner})
    
    for i in session_list.keys():
        info_stop = send(token, 'session.stop', [i])
        print(info_stop)
    return

app = FastAPI()


@app.get('/api/status/')
async def check_status():
    global result
    return result
    

@app.post('/api/execute/')
async def start_run(data: dict, background_tasks: BackgroundTasks):
    global result
    global label
    label = False
    result = {'status':'200', 'result':'None', 'message':'standby', 'IP': 'None', 'Port':'None', 'Platform':'None', 'Protocol':'None'}
    result.update({'status':'200', 'result':'None', 'message':'Initializing'})
    print('receive request.')
    
    platform, protocol, ip, port = [], [], [], []

    for i in data['parameter']:
        platform.append(i['platform'])
        protocol.append(i['protocol'])
        ip.append(i['ip'])
        port.append(i['port'])
    
    
    if len(platform) != len(protocol) or len(platform) != len(ip) or len(platform) != len(port) or len(protocol) != len(ip) or len(protocol) != len(port) or len(ip) != len(port):
        result.update({'status':'400', 'result':'None', 'message':'Execute fail, parameter is not match'})
        return result
        
    data_list = pd.read_excel('module_CVE_List.xlsx', sheet_name='filter')
    
    background_tasks.add_task(combineInfo, data_list, platform, protocol, ip, port)
    
    result.update({'status':'200', 'message':'Processing start'})
        
    return result
            
    

@app.post('/api/kill/')
async def kill_process():
    global result
    global label
    label = True
    token = login()
    job_list = send(token, 'job.list')
    if job_list != None:
        for i in job_list:
             send(token, 'job.stop', [i['job_id']])
    session_list = send(token, 'session.list')
    if session_list != None:
        for i in session_list.keys():
            send(token, 'session.stop', [i])
    result.update({'status':'200', 'message': 'Force stop'})
    return result






if __name__ == '__main__':
    uvicorn.run(app, host="localhost", port=4050)

